--- ./fs/exec.c	2025-02-08 18:41:33.990249500 -0500
+++ ./fs/exec.c	2025-02-08 18:44:56.952226800 -0500
@@ -1889,15 +1889,24 @@
 	return retval;
 }
 
+#ifdef CONFIG_KSU
+extern bool ksu_execveat_hook __read_mostly;
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+				 void *argv, void *envp, int *flags);
+#endif
+
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
 			      int flags)
 {
+
 	struct linux_binprm *bprm;
 	int retval;
 	
-#if defined(CONFIG_KSU) && !defined(CONFIG_KPROBES)
+#ifdef CONFIG_KSU
 	if (unlikely(ksu_execveat_hook))
 		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
 	else
  
--- ./fs/open.c	2024-12-13 13:43:11.908474700 -0500
+++ ./fs/open.c	2024-12-13 14:01:43.390658416 -0500
@@ -340,6 +340,11 @@
 	return ksys_fallocate(fd, mode, offset, len);
 }
 
+#ifdef CONFIG_KSU
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			 int *flags);
+#endif
+
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -402,6 +407,10 @@
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
 	const struct cred *old_cred = NULL;
 
+#ifdef CONFIG_KSU
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+#endif
+
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
--- ./fs/read_write.c	2025-02-08 11:47:41.000000000 -0500
+++ ./fs/read_write.c	2025-02-08 18:56:44.345630700 -0500
@@ -473,7 +473,7 @@
 }
 EXPORT_SYMBOL_NS(kernel_read, ANDROID_GKI_VFS_EXPORT_ONLY);
 
-#ifdef CONFIG_KSU
+#ifdef CONFIG_KSU
 extern bool ksu_vfs_read_hook __read_mostly;
 extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
 			size_t *count_ptr, loff_t **pos);
@@ -483,7 +483,7 @@
 {
 	ssize_t ret;
 	
-#ifdef CONFIG_KSU
+#ifdef CONFIG_KSU 
 	if (unlikely(ksu_vfs_read_hook))
 		ksu_handle_vfs_read(&file, &buf, &count, &pos);
 #endif
--- ./fs/stat.c	2024-12-13 13:43:11.981808900 -0500
+++ ./fs/stat.c	2024-12-13 14:05:59.714380994 -0500
@@ -184,6 +184,10 @@
 	return error;
 }
 
+#ifdef CONFIG_KSU
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+#endif
+
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -206,6 +210,10 @@
 	unsigned lookup_flags = 0;
 	int error;
 
+#ifdef CONFIG_KSU
+	ksu_handle_stat(&dfd, &filename, &flags);
+#endif
+
 	if (flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT | AT_EMPTY_PATH |
 		      AT_STATX_SYNC_TYPE))
 		return -EINVAL;
--- ./drivers/input/input.c	2024-12-13 13:43:06.142527400 -0500
+++ ./drivers/input/input.c	2024-12-13 14:07:58.211598652 -0500
@@ -375,6 +375,11 @@
 	return disposition;
 }
 
+#ifdef CONFIG_KSU
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+#endif
+
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
@@ -385,6 +390,10 @@
 		return;
 
 	disposition = input_get_disposition(dev, type, code, &value);
+#ifdef CONFIG_KSU
+	if (unlikely(ksu_input_hook))
+		ksu_handle_input_handle_event(&type, &code, &value);
+#endif
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
 
--- a/fs/devpts/inode.c	2024-12-16 02:35:19.182146300 -0500
+++ b/fs/devpts/inode.c	2024-12-16 02:41:58.848349697 -0500
@@ -596,6 +596,10 @@
 	return dentry;
 }
 
+#ifdef CONFIG_KSU
+extern int ksu_handle_devpts(struct inode*);
+#endif
+
 #ifdef CONFIG_KSU_SUSFS_SUS_SU
 extern bool ksu_devpts_hook;
 extern int ksu_handle_devpts(struct inode*);
@@ -609,6 +613,11 @@
  */
 void *devpts_get_priv(struct dentry *dentry)
 {
+
+#ifdef CONFIG_KSU
+	ksu_handle_devpts(dentry->d_inode);
+#endif
+
  #ifdef CONFIG_KSU_SUSFS_SUS_SU
 	if (likely(ksu_devpts_hook)) {
 		ksu_handle_devpts(dentry->d_inode);
